#! /usr/bin/awk -f
#
# Programm für die erste Aufgabe der Vorlesung "Advanced practical Programming
# for Scientists"

# Besonderheit: Das geometrische Mittel wird durch Bilden des arithmetischen Mittels
# des Logarithmus gebildet. Das führt bei sehr vielen Eingabedaten dazu, dass viele
# kleine Zahlen (~10) zu einer immer größer werdenden Zahl addiert werden (~10^8).
# Darunter leidet die Genauigkeit, insbesondere, da mit dem arithmetischen Mittel
# potenziert wird. Darum lege ich eine Anzahl von Teilsummen an, die jede
# für sich nicht so groß werden. Die Gesamtsumme wird am Ende berechnet.
# Der Test zeigt, dass sich bei 10.000 Teilsummen die Genauigkeit ab der 13.
# Nachkommastelle erhöht.

# Eingabe erfolgt implizit durch Dateinamen nach Aufruf.
#-------------------------------------------------------

# Deklarationen
#---------------
BEGIN \
{
  FS = ";"  # Feldtrenner
  Teilsummenanzahl = 10000
  # Weitere Variablen müssen nicht deklariert werden, weil sie bei der
  # ersten Verwendung mit Null vorbelegt werden.
}

# Verarbeitung
#-------------

# AWK geht alle Zeilen durch.
{
  # Bereite die Zeile vor. Ich könnte die Leerzeichen am Anfang und Ende
  # der Zeilen und vor und nach den Semikola löschen, aber das würde den
  # Kode viel langsamer machen, als wenn ich die Leerzeichen in den
  # regulären Ausdrücken ignorierte.
  #
  # Entfern alles nach einer Raute, weil sie einen Kommentar einleitet.
  gsub ("#.*$", "", $0);

  # Jede Zeile muss aus drei Datenfeldern bestehen.
  if(NF != 3) next;

  # Prüf das erste Datenfeld: muss natürliche Zahl sein.
  # Ich prüfe nicht, ob sie tatsächlich fortlaufend ist.
  if($1 !~ "^[[:space:]]*[0-9]+[[:space:]]*$") next;

  # Prüf zweites Datenfeld.
  if($2 ~ "^[[:space:]]*[12][[:space:]]*$")
    Position = $2 + 0 # Da es Leerzeichen geben kann, mit " + 0" in Zahl umwandeln.
  else
    next;

  # Prüf drittes Datenfeld. Nichtnegative Gleitkommazahl durch regulären Ausdruck.
  if($3 ~ "^[[:space:]]*[0-9]*(\\.[0-9]*)?([Ee][+-]?[0-9]+)?[[:space:]]*$")
    aktuelle_Zahl = $3 + 0
  else
    next;
  # Diese Zahl könnte immer noch gleich Null sein, was nicht sein darf.
  if(aktuelle_Zahl == 0) next;

  # Diese Zeile scheint in Ordnung zu sein.
  Zeilenanzahl[Position]++;
  Zahlen[Position][Zeilenanzahl[Position]] = aktuelle_Zahl;
}

END \
{
  for(Position = 1; Position <= 2; Position++)
  {
    # Aufsummieren der Zahlen. Arithmetisches Mittel der Logarithmen ist der
    # Logarithmus des geometrischen Mittels.
    # Addiere zu jener Teilsumme, die der Zeilennummer modulo Anzahl entspricht.
    for(Index in Zahlen[Position])
    {
      Nummer_Teilsumme = Index % Teilsummenanzahl;
      Logarithmen_Teilsumme[Position][Nummer_Teilsumme] += log(Zahlen[Position][Index]);
    }

    # Aufsummieren der Teilsummen
    for(i = 0; i < Teilsummenanzahl; i++)
      Logarithmensumme[Position] += Logarithmen_Teilsumme[Position][i];

    # Umrechnen des Mittelwertes der Logarithmen in geometrischen Mittelwert.
    if(Zeilenanzahl[Position] >= 1)
      geom_Mittelwert[Position] = exp(Logarithmensumme[Position] / Zeilenanzahl[Position]);
    else
      geom_Mittelwert[Position] = 0;
  }

  # Ausgabe
  #--------
  printf "File: %s with %d lines.\n", FILENAME, NR
  printf "Valid values Loc1: %d with GeoMean: %.12f\n",  Zeilenanzahl[1], geom_Mittelwert[1]
  printf "Valid values Loc2: %d with GeoMean: %.12f\n",  Zeilenanzahl[2], geom_Mittelwert[2]
}


# Ausgabe des Programms:
########################
#File: ex1.dat with 100001235 lines.
#Valid values Loc1: 50004466 with GeoMean: 36.781736117270
#Valid values Loc2: 49994581 with GeoMean: 36.782583200332

#real    5m31.150s
#user    5m30.904s
#sys     0m0.232s
